// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package su.u_c.deadzone.data.State



@SerialVersionUID(0L)
final case class State(
    players: scala.collection.Seq[su.u_c.deadzone.data.State.State.Player] = Nil,
    bullets: scala.collection.Seq[su.u_c.deadzone.data.State.State.Bullet] = Nil
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[State] with com.trueaccord.lenses.Updatable[State] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      players.foreach(players => __size += 1 + com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(players.serializedSize) + players.serializedSize)
      bullets.foreach(bullets => __size += 1 + com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(bullets.serializedSize) + bullets.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: com.google.protobuf.CodedOutputStream): Unit = {
      players.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      bullets.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: com.google.protobuf.CodedInputStream): su.u_c.deadzone.data.State.State = {
      val __players = (scala.collection.immutable.Vector.newBuilder[su.u_c.deadzone.data.State.State.Player] ++= this.players)
      val __bullets = (scala.collection.immutable.Vector.newBuilder[su.u_c.deadzone.data.State.State.Bullet] ++= this.bullets)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __players += com.trueaccord.scalapb.LiteParser.readMessage(_input__, su.u_c.deadzone.data.State.State.Player.defaultInstance)
          case 18 =>
            __bullets += com.trueaccord.scalapb.LiteParser.readMessage(_input__, su.u_c.deadzone.data.State.State.Bullet.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      su.u_c.deadzone.data.State.State(
          players = __players.result(),
          bullets = __bullets.result()
      )
    }
    def clearPlayers = copy(players = scala.collection.Seq.empty)
    def addPlayers(__vs: su.u_c.deadzone.data.State.State.Player*): State = addAllPlayers(__vs)
    def addAllPlayers(__vs: TraversableOnce[su.u_c.deadzone.data.State.State.Player]): State = copy(players = players ++ __vs)
    def withPlayers(__v: scala.collection.Seq[su.u_c.deadzone.data.State.State.Player]): State = copy(players = __v)
    def clearBullets = copy(bullets = scala.collection.Seq.empty)
    def addBullets(__vs: su.u_c.deadzone.data.State.State.Bullet*): State = addAllBullets(__vs)
    def addAllBullets(__vs: TraversableOnce[su.u_c.deadzone.data.State.State.Bullet]): State = copy(bullets = bullets ++ __vs)
    def withBullets(__v: scala.collection.Seq[su.u_c.deadzone.data.State.State.Bullet]): State = copy(bullets = __v)
    def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
      __field.getNumber match {
        case 1 => players
        case 2 => bullets
      }
    }
    override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = su.u_c.deadzone.data.State.State
}

object State extends com.trueaccord.scalapb.GeneratedMessageCompanion[su.u_c.deadzone.data.State.State] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[su.u_c.deadzone.data.State.State] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): su.u_c.deadzone.data.State.State = {
    require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
    val __fields = descriptor.getFields
    su.u_c.deadzone.data.State.State(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[scala.collection.Seq[su.u_c.deadzone.data.State.State.Player]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[scala.collection.Seq[su.u_c.deadzone.data.State.State.Bullet]]
    )
  }
  def descriptor: com.google.protobuf.Descriptors.Descriptor = StateProto.descriptor.getMessageTypes.get(0)
  def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    require(__field.getContainingType() == descriptor, "FieldDescriptor does not match message type.")
    var __out: com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    __field.getNumber match {
      case 1 => __out = su.u_c.deadzone.data.State.State.Player
      case 2 => __out = su.u_c.deadzone.data.State.State.Bullet
    }
  __out
  }
  def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
  lazy val defaultInstance = su.u_c.deadzone.data.State.State(
  )
  @SerialVersionUID(0L)
  final case class Player(
      id: Int = 0,
      x: Float = 0.0f,
      y: Float = 0.0f,
      nickname: String = "",
      score: Int = 0
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Player] with com.trueaccord.lenses.Updatable[Player] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (id != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, id) }
        if (x != 0.0f) { __size += com.google.protobuf.CodedOutputStream.computeFloatSize(2, x) }
        if (y != 0.0f) { __size += com.google.protobuf.CodedOutputStream.computeFloatSize(3, y) }
        if (nickname != "") { __size += com.google.protobuf.CodedOutputStream.computeStringSize(4, nickname) }
        if (score != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(5, score) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = id
          if (__v != 0) {
            _output__.writeInt32(1, __v)
          }
        };
        {
          val __v = x
          if (__v != 0.0f) {
            _output__.writeFloat(2, __v)
          }
        };
        {
          val __v = y
          if (__v != 0.0f) {
            _output__.writeFloat(3, __v)
          }
        };
        {
          val __v = nickname
          if (__v != "") {
            _output__.writeString(4, __v)
          }
        };
        {
          val __v = score
          if (__v != 0) {
            _output__.writeInt32(5, __v)
          }
        };
      }
      def mergeFrom(`_input__`: com.google.protobuf.CodedInputStream): su.u_c.deadzone.data.State.State.Player = {
        var __id = this.id
        var __x = this.x
        var __y = this.y
        var __nickname = this.nickname
        var __score = this.score
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __id = _input__.readInt32()
            case 21 =>
              __x = _input__.readFloat()
            case 29 =>
              __y = _input__.readFloat()
            case 34 =>
              __nickname = _input__.readString()
            case 40 =>
              __score = _input__.readInt32()
            case tag => _input__.skipField(tag)
          }
        }
        su.u_c.deadzone.data.State.State.Player(
            id = __id,
            x = __x,
            y = __y,
            nickname = __nickname,
            score = __score
        )
      }
      def withId(__v: Int): Player = copy(id = __v)
      def withX(__v: Float): Player = copy(x = __v)
      def withY(__v: Float): Player = copy(y = __v)
      def withNickname(__v: String): Player = copy(nickname = __v)
      def withScore(__v: Int): Player = copy(score = __v)
      def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
        __field.getNumber match {
          case 1 => {
            val __t = id
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = x
            if (__t != 0.0f) __t else null
          }
          case 3 => {
            val __t = y
            if (__t != 0.0f) __t else null
          }
          case 4 => {
            val __t = nickname
            if (__t != "") __t else null
          }
          case 5 => {
            val __t = score
            if (__t != 0) __t else null
          }
        }
      }
      override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = su.u_c.deadzone.data.State.State.Player
  }
  
  object Player extends com.trueaccord.scalapb.GeneratedMessageCompanion[su.u_c.deadzone.data.State.State.Player] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[su.u_c.deadzone.data.State.State.Player] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): su.u_c.deadzone.data.State.State.Player = {
      require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
      val __fields = descriptor.getFields
      su.u_c.deadzone.data.State.State.Player(
        __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
        __fieldsMap.getOrElse(__fields.get(1), 0.0f).asInstanceOf[Float],
        __fieldsMap.getOrElse(__fields.get(2), 0.0f).asInstanceOf[Float],
        __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[String],
        __fieldsMap.getOrElse(__fields.get(4), 0).asInstanceOf[Int]
      )
    }
    def descriptor: com.google.protobuf.Descriptors.Descriptor = su.u_c.deadzone.data.State.State.descriptor.getNestedTypes.get(0)
    def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
    def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
    lazy val defaultInstance = su.u_c.deadzone.data.State.State.Player(
    )
    implicit class PlayerLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, su.u_c.deadzone.data.State.State.Player]) extends com.trueaccord.lenses.ObjectLens[UpperPB, su.u_c.deadzone.data.State.State.Player](_l) {
      def id: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
      def x: com.trueaccord.lenses.Lens[UpperPB, Float] = field(_.x)((c_, f_) => c_.copy(x = f_))
      def y: com.trueaccord.lenses.Lens[UpperPB, Float] = field(_.y)((c_, f_) => c_.copy(y = f_))
      def nickname: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.nickname)((c_, f_) => c_.copy(nickname = f_))
      def score: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.score)((c_, f_) => c_.copy(score = f_))
    }
    final val ID_FIELD_NUMBER = 1
    final val X_FIELD_NUMBER = 2
    final val Y_FIELD_NUMBER = 3
    final val NICKNAME_FIELD_NUMBER = 4
    final val SCORE_FIELD_NUMBER = 5
  }
  
  @SerialVersionUID(0L)
  final case class Bullet(
      id: Int = 0,
      x: Float = 0.0f,
      y: Float = 0.0f,
      dx: Float = 0.0f,
      dy: Float = 0.0f
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Bullet] with com.trueaccord.lenses.Updatable[Bullet] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (id != 0) { __size += com.google.protobuf.CodedOutputStream.computeInt32Size(1, id) }
        if (x != 0.0f) { __size += com.google.protobuf.CodedOutputStream.computeFloatSize(2, x) }
        if (y != 0.0f) { __size += com.google.protobuf.CodedOutputStream.computeFloatSize(3, y) }
        if (dx != 0.0f) { __size += com.google.protobuf.CodedOutputStream.computeFloatSize(4, dx) }
        if (dy != 0.0f) { __size += com.google.protobuf.CodedOutputStream.computeFloatSize(5, dy) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = id
          if (__v != 0) {
            _output__.writeInt32(1, __v)
          }
        };
        {
          val __v = x
          if (__v != 0.0f) {
            _output__.writeFloat(2, __v)
          }
        };
        {
          val __v = y
          if (__v != 0.0f) {
            _output__.writeFloat(3, __v)
          }
        };
        {
          val __v = dx
          if (__v != 0.0f) {
            _output__.writeFloat(4, __v)
          }
        };
        {
          val __v = dy
          if (__v != 0.0f) {
            _output__.writeFloat(5, __v)
          }
        };
      }
      def mergeFrom(`_input__`: com.google.protobuf.CodedInputStream): su.u_c.deadzone.data.State.State.Bullet = {
        var __id = this.id
        var __x = this.x
        var __y = this.y
        var __dx = this.dx
        var __dy = this.dy
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __id = _input__.readInt32()
            case 21 =>
              __x = _input__.readFloat()
            case 29 =>
              __y = _input__.readFloat()
            case 37 =>
              __dx = _input__.readFloat()
            case 45 =>
              __dy = _input__.readFloat()
            case tag => _input__.skipField(tag)
          }
        }
        su.u_c.deadzone.data.State.State.Bullet(
            id = __id,
            x = __x,
            y = __y,
            dx = __dx,
            dy = __dy
        )
      }
      def withId(__v: Int): Bullet = copy(id = __v)
      def withX(__v: Float): Bullet = copy(x = __v)
      def withY(__v: Float): Bullet = copy(y = __v)
      def withDx(__v: Float): Bullet = copy(dx = __v)
      def withDy(__v: Float): Bullet = copy(dy = __v)
      def getField(__field: com.google.protobuf.Descriptors.FieldDescriptor): scala.Any = {
        __field.getNumber match {
          case 1 => {
            val __t = id
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = x
            if (__t != 0.0f) __t else null
          }
          case 3 => {
            val __t = y
            if (__t != 0.0f) __t else null
          }
          case 4 => {
            val __t = dx
            if (__t != 0.0f) __t else null
          }
          case 5 => {
            val __t = dy
            if (__t != 0.0f) __t else null
          }
        }
      }
      override def toString: String = com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = su.u_c.deadzone.data.State.State.Bullet
  }
  
  object Bullet extends com.trueaccord.scalapb.GeneratedMessageCompanion[su.u_c.deadzone.data.State.State.Bullet] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[su.u_c.deadzone.data.State.State.Bullet] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): su.u_c.deadzone.data.State.State.Bullet = {
      require(__fieldsMap.keys.forall(_.getContainingType() == descriptor), "FieldDescriptor does not match message type.")
      val __fields = descriptor.getFields
      su.u_c.deadzone.data.State.State.Bullet(
        __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[Int],
        __fieldsMap.getOrElse(__fields.get(1), 0.0f).asInstanceOf[Float],
        __fieldsMap.getOrElse(__fields.get(2), 0.0f).asInstanceOf[Float],
        __fieldsMap.getOrElse(__fields.get(3), 0.0f).asInstanceOf[Float],
        __fieldsMap.getOrElse(__fields.get(4), 0.0f).asInstanceOf[Float]
      )
    }
    def descriptor: com.google.protobuf.Descriptors.Descriptor = su.u_c.deadzone.data.State.State.descriptor.getNestedTypes.get(1)
    def messageCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__field)
    def enumCompanionForField(__field: com.google.protobuf.Descriptors.FieldDescriptor): com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__field)
    lazy val defaultInstance = su.u_c.deadzone.data.State.State.Bullet(
    )
    implicit class BulletLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, su.u_c.deadzone.data.State.State.Bullet]) extends com.trueaccord.lenses.ObjectLens[UpperPB, su.u_c.deadzone.data.State.State.Bullet](_l) {
      def id: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
      def x: com.trueaccord.lenses.Lens[UpperPB, Float] = field(_.x)((c_, f_) => c_.copy(x = f_))
      def y: com.trueaccord.lenses.Lens[UpperPB, Float] = field(_.y)((c_, f_) => c_.copy(y = f_))
      def dx: com.trueaccord.lenses.Lens[UpperPB, Float] = field(_.dx)((c_, f_) => c_.copy(dx = f_))
      def dy: com.trueaccord.lenses.Lens[UpperPB, Float] = field(_.dy)((c_, f_) => c_.copy(dy = f_))
    }
    final val ID_FIELD_NUMBER = 1
    final val X_FIELD_NUMBER = 2
    final val Y_FIELD_NUMBER = 3
    final val DX_FIELD_NUMBER = 4
    final val DY_FIELD_NUMBER = 5
  }
  
  implicit class StateLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, su.u_c.deadzone.data.State.State]) extends com.trueaccord.lenses.ObjectLens[UpperPB, su.u_c.deadzone.data.State.State](_l) {
    def players: com.trueaccord.lenses.Lens[UpperPB, scala.collection.Seq[su.u_c.deadzone.data.State.State.Player]] = field(_.players)((c_, f_) => c_.copy(players = f_))
    def bullets: com.trueaccord.lenses.Lens[UpperPB, scala.collection.Seq[su.u_c.deadzone.data.State.State.Bullet]] = field(_.bullets)((c_, f_) => c_.copy(bullets = f_))
  }
  final val PLAYERS_FIELD_NUMBER = 1
  final val BULLETS_FIELD_NUMBER = 2
}
